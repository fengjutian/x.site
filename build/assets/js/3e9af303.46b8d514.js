"use strict";(self.webpackChunkx_site=self.webpackChunkx_site||[]).push([[4883],{473:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var s=t(4848),r=t(8453);const o={sidebar_position:6},a="Handlers",i={id:"actix/basics/Handlers",title:"Handlers",description:"Request Handlers",source:"@site/docs/actix/basics/Handlers.md",sourceDirName:"actix/basics",slug:"/actix/basics/Handlers",permalink:"/x.site/docs/actix/basics/Handlers",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/actix/basics/Handlers.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"actixSidebar",previous:{title:"Extraction",permalink:"/x.site/docs/actix/basics/Extraction"},next:{title:"\u8fdb\u9636",permalink:"/x.site/docs/category/\u8fdb\u9636"}},c={},d=[{value:"Request Handlers",id:"request-handlers",level:2},{value:"Response with custom type",id:"response-with-custom-type",level:2},{value:"Streaming response body",id:"streaming-response-body",level:2},{value:"Different return types (Either)",id:"different-return-types-either",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"handlers",children:"Handlers"}),"\n",(0,s.jsx)(n.h2,{id:"request-handlers",children:"Request Handlers"}),"\n",(0,s.jsx)(n.p,{children:"A request handler is an async function that accepts zero or more parameters that can be extracted from a request (i.e., impl FromRequest) and returns a type that can be converted into an HttpResponse (i.e., impl Responder)."}),"\n",(0,s.jsx)(n.p,{children:"Request handling happens in two stages. First the handler object is called, returning any object that implements the Responder trait. Then, respond_to() is called on the returned object, converting itself to a HttpResponse or Error."}),"\n",(0,s.jsx)(n.p,{children:"By default Actix Web provides Responder implementations for some standard types, such as &'static str, String, etc."}),"\n",(0,s.jsx)(n.p,{children:"For a complete list of implementations, check the Responder documentation."}),"\n",(0,s.jsx)(n.p,{children:"Examples of valid handlers:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'async fn index(_req: HttpRequest) -> &\'static str {\n    "Hello world!"\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'async fn index(_req: HttpRequest) -> String {\n    "Hello world!".to_owned()\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"You can also change the signature to return impl Responder which works well if more complex types are involved."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'async fn index(_req: HttpRequest) -> impl Responder {\n    web::Bytes::from_static(b"Hello world!")\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"async fn index(req: HttpRequest) -> Box<Future<Item=HttpResponse, Error=Error>> {\n    ...\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"response-with-custom-type",children:"Response with custom type"}),"\n",(0,s.jsx)(n.p,{children:"To return a custom type directly from a handler function, the type needs to implement the Responder trait."}),"\n",(0,s.jsx)(n.p,{children:"Let's create a response for a custom type that serializes to an application/json response:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use actix_web::{\n    body::BoxBody, http::header::ContentType, HttpRequest, HttpResponse, Responder,\n};\nuse serde::Serialize;\n\n#[derive(Serialize)]\nstruct MyObj {\n    name: &\'static str,\n}\n\n// Responder\nimpl Responder for MyObj {\n    type Body = BoxBody;\n\n    fn respond_to(self, _req: &HttpRequest) -> HttpResponse<Self::Body> {\n        let body = serde_json::to_string(&self).unwrap();\n\n        // Create response and set content type\n        HttpResponse::Ok()\n            .content_type(ContentType::json())\n            .body(body)\n    }\n}\n\nasync fn index() -> impl Responder {\n    MyObj { name: "user" }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"streaming-response-body",children:"Streaming response body"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use actix_web::{get, web, App, Error, HttpResponse, HttpServer};\nuse futures::{future::ok, stream::once};\n\n#[get("/stream")]\nasync fn stream() -> HttpResponse {\n    let body = once(ok::<_, Error>(web::Bytes::from_static(b"test")));\n\n    HttpResponse::Ok()\n        .content_type("application/json")\n        .streaming(body)\n}\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    HttpServer::new(|| App::new().service(stream))\n        .bind(("127.0.0.1", 8080))?\n        .run()\n        .await\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"different-return-types-either",children:"Different return types (Either)"}),"\n",(0,s.jsx)(n.p,{children:"Sometimes, you need to return different types of responses. For example, you can error check and return errors, return async responses, or any result that requires two different types."}),"\n",(0,s.jsx)(n.p,{children:"For this case, the Either type can be used. Either allows combining two different responder types into a single type."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use actix_web::{Either, Error, HttpResponse};\n\ntype RegisterResult = Either<HttpResponse, Result<&\'static str, Error>>;\n\nasync fn index() -> RegisterResult {\n    if is_a_variant() {\n        // choose Left variant\n        Either::Left(HttpResponse::BadRequest().body("Bad data"))\n    } else {\n        // choose Right variant\n        Either::Right(Ok("Hello!"))\n    }\n}\n'})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(6540);const r={},o=s.createContext(r);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);